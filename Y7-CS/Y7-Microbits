<title>Year 7 CS</title>
<style type='text/css'>
body {width: 80%; margin:auto;}
a { text-decoration: none; }
a:hover { text-decoration: underline; }
h1 {display: none; }
h2 { background-color:#fc9003; padding:16px;text-align:center;}
h3 {background-color:lightblue; padding:16px; text-align:center;}
button {float: right;margin-bottom: 20px; background-color: lightblue; border-radius:3px; }
</style>

<video auto-play="true" loop="loop" muted="muted" controls>
  <source src="./img/xmas_pygame.mp4" type="video/mp4">
</video>
## Year 7 Computer Science Unit: Computing Fundamentals with MicroBits 
| Objectives:
+ understand and apply the fundamental principles & concepts of computer science.
+ gain practical experience of writing computer programs to solve problems.
+ evaluate and apply information technology, including new or unfamiliar technologies analytically to solve problems
+ be responsible, competent, confident and creative users of information and communication technology.
| Learning outcomes:
+ create a real life algorithm to design a paper aeroplane
+ design a prototype of a computerized paper aeroplane
+ understand how algorithms are formed using flowcharts and pseudocode
+ experiment with iteration and selection
+ understand computer systems and create programs for the BBC micro:bit 
+ create a video explaining their learning about computer systems and programming concepts 
| Learning pathway:
In this unit, you will build your coding experience as you create programmatic images, animations, and interactive games.  
Starting off with simple, primitive shapes and colours, and building up to more sophisticated sprite-based games using shapes and images, you will become familiar with the programming concepts and the design process computer scientists use daily.  
You will then learn how these simpler constructs can be combined to create more complex programs. 
In the final project, you will develop a personalized, interactive game. 
Along the way, you will practice design, testing, and iteration, as you come to see that failure and debugging are an expected and valuable part of the programming process. 
